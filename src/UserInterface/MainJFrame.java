/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;


import Bank.BankAccountingPeople;
import Bank.Customer;
import Bitcoin.BitcoinAccountingPeople;
import Bitcoin.Custodian;
import Bitcoin.Exchanger;
import Bitcoin.Investor;
import Business.Business;
import Business.ConfigureABusiness;
import Business.Db4oUtil;
import Government.GovernmentAccountingPeople;
import Supplier.SaleRecord;
import UserInterface.Bank.AccountingPeople.BankAccountingPeopleWorkArea;
import UserInterface.Bank.Admin.BankAdminWorkArea;
import UserInterface.Bank.Customer.BankCustomerWorkArea;
import UserInterface.Bitcoin.Admin.BitcoinAdminWorkArea;
import UserInterface.Bitcoin.BitcoinAccountingPeopleWorkArea;
import UserInterface.Bitcoin.BitcoinCustodianWorkArea;
import UserInterface.Bitcoin.BitcoinExchangerWorkArea;
import UserInterface.Bitcoin.Investor.BitcoinInvestorWorkArea;
import UserInterface.Government.GovernmentAccountingPeopleWorkArea;
import UserInterface.Government.GovernmentAdminWorkArea;
import UserInterface.Government.GovernmentBankSupervisorWorkArea;
import UserInterface.Government.GovernmentSupplierSupervisorWorkArea;
import UserInterface.Supplier.BitcoinSupplierAdminWorkArea;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 *
 * @author Administrator
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private Business business;

    public MainJFrame() {
        initComponents();
        
        business = Db4oUtil.getInstance().retrieveSystem();
        populateEnterprise();
    }
    public void populateEnterprise() {
        eCombo.removeAllItems();
        eCombo.addItem("Bank");
        eCombo.addItem("Bitcoin");
        eCombo.addItem("Government");
        eCombo.addItem("Supplier");
    }
    public void populateRole() {
        String ss = (String) eCombo.getSelectedItem();
        if (ss.equals("Bank")) {
            rCombo.addItem("Admin");
            rCombo.addItem("AccountingPeople");
            rCombo.addItem("Customer");
        } else if (ss.equals("Bitcoin")) {
            rCombo.addItem("Admin");
            rCombo.addItem("AccountingPeople");
            rCombo.addItem("Investor");
            rCombo.addItem("Custodian");
            rCombo.addItem("Exchanger");
        } else if (ss.equals("Government")) {
            rCombo.addItem("Admin");
            rCombo.addItem("AccountingPeople");
            rCombo.addItem("BankSupervisor");
            rCombo.addItem("SupplierSupervisor");
        } else if (ss.equals("Supplier")) {
            rCombo.addItem("Admin");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        loginJButton = new javax.swing.JButton();
        usernameTf = new javax.swing.JTextField();
        passwordTf = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        eCombo = new javax.swing.JComboBox<>();
        rCombo = new javax.swing.JComboBox<>();
        signInBtn = new javax.swing.JButton();
        userProcessContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(150);

        jPanel1.setBackground(new java.awt.Color(0, 204, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 800));

        loginJButton.setText("Login");
        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("User Name");

        jLabel2.setText("Password");

        logoutJButton.setText("Logout");
        logoutJButton.setEnabled(false);
        logoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutJButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Enterprise:");

        jLabel4.setText("Role:");

        eCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eComboActionPerformed(evt);
            }
        });

        rCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rComboActionPerformed(evt);
            }
        });

        signInBtn.setText("New User");
        signInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(usernameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loginJLabel))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(passwordTf, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(loginJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(logoutJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(signInBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(loginJLabel)
                .addContainerGap(221, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usernameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loginJButton)
                .addGap(18, 18, 18)
                .addComponent(logoutJButton)
                .addGap(18, 18, 18)
                .addComponent(signInBtn)
                .addGap(47, 47, 47))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        userProcessContainer.setBackground(new java.awt.Color(0, 204, 153));
        userProcessContainer.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(userProcessContainer);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginJButtonActionPerformed
        String ess = (String) eCombo.getSelectedItem();
        String rss = (String) rCombo.getSelectedItem();
        
        // Get user name
        String userName = usernameTf.getText();
        // Get Password
        char[] passwordCharArray = passwordTf.getPassword();
        String password = String.valueOf(passwordCharArray);
        
        if (ess.equals("Bank")) {
            switch (rss) {
                case "Admin" :
                    if (userName.equals("bbb")&&password.equals("hhh")) {
                        BankAdminWorkArea ms = new BankAdminWorkArea(userProcessContainer, business);
                        userProcessContainer.add("BankAdminWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "AccountingPeople" :
                    boolean flag1 = false;
                    for (BankAccountingPeople ap : business.getBankAccountingPeopleDirectory().getBankAPDirectory()) {
                        if (userName.equals(ap.getUsername())&&password.equals(ap.getPassword())) {
                            flag1 = true;
                            BankAccountingPeople a = ap;
                            BankAccountingPeopleWorkArea ms = new BankAccountingPeopleWorkArea(userProcessContainer, business, a);
                            userProcessContainer.add("BankAccountingPeopleWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag1 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "Customer" :
                    boolean flag2 = false;
                    for (Customer c : business.getCustomerDirectory().getCustomerDirectory()) {
                        if (userName.equals(c.getBankusername())&&password.equals(c.getBankpassword())) {
                            flag2 = true;
                            Customer customer = c;
                            BankCustomerWorkArea ms = new BankCustomerWorkArea(userProcessContainer, business, customer);
                            userProcessContainer.add("BankCustomerWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag2 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                }
            } else if (ess.equals("Bitcoin")) {
                switch (rss) {
                case "Admin" :
                    if (userName.equals("ccc")&&password.equals("hhh")) {
                        BitcoinAdminWorkArea ms = new BitcoinAdminWorkArea(userProcessContainer, business);
                        userProcessContainer.add("BitcoinAdminWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "AccountingPeople" :
                    boolean flag1 = false;
                    for (BitcoinAccountingPeople ap : business.getBitcoinAccountingPeopleDirectory().getBitcoinAccountingPeopleDirectory()) {
                        if (userName.equals(ap.getUsername())&&password.equals(ap.getPassword())) {
                            flag1 = true;
                            BitcoinAccountingPeople bap = ap;
                            BitcoinAccountingPeopleWorkArea ms = new BitcoinAccountingPeopleWorkArea(userProcessContainer, business, bap);
                            userProcessContainer.add("BitcoinAccountingPeopleWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag1 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "Investor" :
                    boolean flag2 = false;
                    for (Customer c : business.getCustomerDirectory().getCustomerDirectory()) {
                        if (userName.equals(c.getBitcoinusername())&&password.equals(c.getBitcoinpassword())) {
                            flag2 = true;
                            Customer in = c;
                            BitcoinInvestorWorkArea ms = new BitcoinInvestorWorkArea(userProcessContainer, business, in);
                            userProcessContainer.add("BitcoinInvestorWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag2 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "Custodian" :
                    boolean flag3 = false;
                    for (Custodian c : business.getCustodianDirectory().getCustodianDirectory()) {
                        if (userName.equals(c.getUsername())&&password.equals(c.getPassword())) {
                            flag3 = true;
                            Custodian cus = c;
                            BitcoinCustodianWorkArea ms = new BitcoinCustodianWorkArea(userProcessContainer, business, cus);
                            userProcessContainer.add("BitcoinCustodianWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag3 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "Exchanger" :
                    boolean flag4 = false;
                    for (Exchanger c : business.getExchangerDirectory().getExchangerDirectory()) {
                        if (userName.equals(c.getUsername())&&password.equals(c.getPassword())) {
                            flag4 = true;
                            Exchanger ex = c;
                            BitcoinExchangerWorkArea ms = new BitcoinExchangerWorkArea(userProcessContainer, business, ex);
                            userProcessContainer.add("BitcoinExchangerWorkArea", ms);
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            layout.next(userProcessContainer);
                            break;
                        }
                    }
                    if (flag4 == false) {
                        JOptionPane.showMessageDialog(this, "Invalid UserName or Password", "Error", JOptionPane.ERROR_MESSAGE);
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                }
            } else if (ess.equals("Government")) {
                switch (rss) {
                case "Admin" :
                    if (userName.equals("ggg")&&password.equals("hhh")) {
                        GovernmentAdminWorkArea ms = new GovernmentAdminWorkArea(userProcessContainer, business);
                        userProcessContainer.add("GovernmentAdminWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "AccountingPeople" :
                    if (userName.equals(business.getGovernmentAccountingPeople().getUsername())&&password.equals(business.getGovernmentAccountingPeople().getPassword())) {
                        GovernmentAccountingPeopleWorkArea ms = new GovernmentAccountingPeopleWorkArea(userProcessContainer, business);
                        userProcessContainer.add("GovernmentAccountingPeopleWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "BankSupervisor" :
                    if (userName.equals(business.getBankSupervisor().getUsername())&&password.equals(business.getBankSupervisor().getPassword())) {
                        GovernmentBankSupervisorWorkArea ms = new GovernmentBankSupervisorWorkArea(userProcessContainer, business);
                        userProcessContainer.add("GovernmentBankSupervisorWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                        usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                case "SupplierSupervisor" :
                    if (userName.equals(business.getSupplierSupervisor().getUsername())&&password.equals(business.getSupplierSupervisor().getPassword())) {
                        GovernmentSupplierSupervisorWorkArea ms = new GovernmentSupplierSupervisorWorkArea(userProcessContainer, business);
                        userProcessContainer.add("GovernmentSupplierSupervisorWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                         usernameTf.setText("");
                        passwordTf.setText("");
                        return;
                    }
                    break;
                }
            } else if (ess.equals("Supplier")) {
                    if (rss.equals("Admin")) {
                        if (userName.equals("sss")&&password.equals("hhh")) {
                        BitcoinSupplierAdminWorkArea ms = new BitcoinSupplierAdminWorkArea(userProcessContainer, business);
                        userProcessContainer.add("SupplierWorkArea", ms);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid User Name/ Password.");
                            usernameTf.setText("");
                            passwordTf.setText("");
                            return;
                        }
                    }
            }
        loginJButton.setEnabled(false);
        logoutJButton.setEnabled(true);
        usernameTf.setEnabled(false);
        passwordTf.setEnabled(false);
    }//GEN-LAST:event_loginJButtonActionPerformed

    private void logoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutJButtonActionPerformed
        logoutJButton.setEnabled(false);
        usernameTf.setEnabled(true);
        passwordTf.setEnabled(true);
        loginJButton.setEnabled(true);
        
        usernameTf.setText("");
        passwordTf.setText("");
        
        userProcessContainer.removeAll();
        JPanel blankJP = new JPanel();
        userProcessContainer.add("blank", blankJP);
        CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
        crdLyt.next(userProcessContainer);
        Db4oUtil.getInstance().storeSystem(business);

    }//GEN-LAST:event_logoutJButtonActionPerformed

    private void rComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rComboActionPerformed

    private void eComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eComboActionPerformed
        // TODO add your handling code here:
        populateRole();
    }//GEN-LAST:event_eComboActionPerformed
    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        Db4oUtil.getInstance().storeSystem(business);
    } 
    private void signInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInBtnActionPerformed
        // TODO add your handling code here:
//        String ess = (String) eCombo.getSelectedItem();
//        String rss = (String) rCombo.getSelectedItem();
//        if (ess.equals("Bank")&&rss.equals("Customer")) {
//            CustomerSignIn ms = new CustomerSignIn(userProcessContainer, business);
//            userProcessContainer.add("CustomerSignIn", ms);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            layout.next(userProcessContainer);
//        } else if (ess.equals("Bitcoin")&&rss.equals("Investor")) {
//            InvestorSignIn ms = new InvestorSignIn(userProcessContainer, business);
//            userProcessContainer.add("InvestorSignIn", ms);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            layout.next(userProcessContainer);
//        } else {
//            JOptionPane.showMessageDialog(null, "Illegal Operation!");
//        }
        CustomerSignIn ms = new CustomerSignIn(userProcessContainer, business);
        userProcessContainer.add("CustomerSignIn", ms);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_signInBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> eCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginJButton;
    private javax.swing.JLabel loginJLabel;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JPasswordField passwordTf;
    private javax.swing.JComboBox<String> rCombo;
    private javax.swing.JButton signInBtn;
    private javax.swing.JPanel userProcessContainer;
    private javax.swing.JTextField usernameTf;
    // End of variables declaration//GEN-END:variables
}
