/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Bitcoin;


import Bank.Customer;
import Bitcoin.Bitcoin;
import Bitcoin.Ownership;
import Business.Business;
import UserInterface.Bitcoin.Admin.BitcoinAdminWorkArea;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author liugo
 */
public class BitcoinDepositoryWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form DepositoryJPanel
     */
//    public BTPAdminWorkAreaJPanel() {
//        initComponents();
//    }
    private JPanel userProcessContainer;
    private Business business;
    
    public BitcoinDepositoryWorkArea(JPanel userProcessContainer, Business business) {
       initComponents();
       this.userProcessContainer = userProcessContainer;
       this.business = business;
       populateBitcoinTable();
    }
    
    private void populateBitcoinTable() {
        DefaultTableModel model = (DefaultTableModel) jTableBitcoin.getModel();
        model.setRowCount(0);
        for(Customer cus : business.getCustomerDirectory().getCustomerDirectory()){
            for(Bitcoin bit : cus.getWallet().getBitcoinCatalog()){
                Object[] row = new Object[2];
                row[0] = bit.getId();
                row[1] = bit.getMovements().get(bit.getMovements().size()-1).getTo();
                model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBitcoin = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableBitcoinOwnership = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Depository");

        jTableBitcoin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bitcoin ID", "Current Owner"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableBitcoin);
        if (jTableBitcoin.getColumnModel().getColumnCount() > 0) {
            jTableBitcoin.getColumnModel().getColumn(0).setResizable(false);
            jTableBitcoin.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setText("Check Transaction History");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableBitcoinOwnership.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "From ", "To", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableBitcoinOwnership);
        if (jTableBitcoinOwnership.getColumnModel().getColumnCount() > 0) {
            jTableBitcoinOwnership.getColumnModel().getColumn(0).setResizable(false);
            jTableBitcoinOwnership.getColumnModel().getColumn(1).setResizable(false);
            jTableBitcoinOwnership.getColumnModel().getColumn(2).setResizable(false);
            jTableBitcoinOwnership.getColumnModel().getColumn(3).setResizable(false);
        }

        jButtonBack.setText("<< Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(389, 389, 389)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonBack)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButtonBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int row = jTableBitcoin.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int bitID = (int) jTableBitcoin.getValueAt(row, 0);
        DefaultTableModel model = (DefaultTableModel) jTableBitcoinOwnership.getModel();
        model.setRowCount(0);
        for(Customer cus : business.getCustomerDirectory().getCustomerDirectory()){
            for(Bitcoin bit : cus.getWallet().getBitcoinCatalog()){
                if(bitID == bit.getId()){
                    for(Ownership os : bit.getMovements()){
                        Object[] row1 = new Object[2];
                        row1[0] = os.getOid();
                        row1[1] = os.getFrom();
                        row1[2] = os.getTo();
                        row1[3] = os.getDate();
                        model.addRow(row1);
                    }
                }
                
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        BitcoinAdminWorkArea bawa = new BitcoinAdminWorkArea(userProcessContainer, business);
        userProcessContainer.add("BitcoinAdminWorkArea", bawa);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButtonBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableBitcoin;
    private javax.swing.JTable jTableBitcoinOwnership;
    // End of variables declaration//GEN-END:variables

    
}
