/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Bitcoin.Investor;

import Bank.Customer;
import Bitcoin.MatchPair;
import UserInterface.Supplier.*;
import Business.Business;
import UserInterface.Bitcoin.Investor.BitcoinInvestorWorkArea;
import WorkRequest.InvestorWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author owner
 */
public class RequestConfirmationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestConfirmationJPanel
     */
//    public RequestConfirmationJPanel() {
//        initComponents();
//    }
    private JPanel userProcessContainer;
    private Business business;
    private Customer customer;
    
    RequestConfirmationJPanel(JPanel userProcessContainer, Business business, Customer customer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.customer = customer;
        poplateCustodianTable();
        poplateExchangerTable();
    }
    
    private void poplateCustodianTable() {
        DefaultTableModel model = (DefaultTableModel)CustodianRequestJTable.getModel();
        model.setRowCount(0);
        for(InvestorWorkRequest request : business.getCustodianWorkQueue().getWorkRequestList()){
            if(request.getSender().getName().equals(customer.getName())){
                Object[] row = new Object[5];
                row[0] = request.getRequestDate();
                row[1] = request.getResolveDate();
                row[2] = request.getQuantity();
                row[3] = request.getQuantity()*1200;
                row[4] = request.getStatus();
                model.addRow(row);
            }
        }
    }
    private void poplateExchangerTable() {
        DefaultTableModel model = (DefaultTableModel)ExchangerRequestJTable1.getModel();
        model.setRowCount(0);
        for(MatchPair mp : business.getMatchPairDirectory().getMatchPairDirectory()){
            if(mp.getBuyer().equals(customer.getName()) || mp.getSeller().equals(customer.getName())){
                Object[] row = new Object[7];
                row[0] = mp.getId();
                row[1] = mp.getSeller();
                row[2] = mp.getBuyer();
                row[3] = mp.getQuantity();
                row[4] = mp.getBuyerQuantity(); 
                row[5] = mp.getStatus();
                row[6] = mp.getBuyerStatus();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        CustodianRequestJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldMessageFromCustodian = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButtonCustodianConfirm = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButtonExchangerConfirm = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ExchangerRequestJTable1 = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();
        jButtonViewCustodianMessage = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Request Confirmation");

        CustodianRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Date", "Resolve Date", "Quantity", "Total Price", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(CustodianRequestJTable);
        if (CustodianRequestJTable.getColumnModel().getColumnCount() > 0) {
            CustodianRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            CustodianRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            CustodianRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            CustodianRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel5.setText("-Custodian Request Information------------------------------------------------------------------------------------------------------------------------------------");

        jLabel7.setText("Message From Custodian:");

        jButtonCustodianConfirm.setText("Confirm");
        jButtonCustodianConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCustodianConfirmActionPerformed(evt);
            }
        });

        jLabel6.setText("-Exchanger Request Information-----------------------------------------------------------------------------------------------------------------------------------");

        jButtonExchangerConfirm.setText("Confirm");
        jButtonExchangerConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExchangerConfirmActionPerformed(evt);
            }
        });

        ExchangerRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Seller", "Buyer", "SellerQuantity", "Buyer Quantity", "Seller Status", "Buyer Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(ExchangerRequestJTable1);
        if (ExchangerRequestJTable1.getColumnModel().getColumnCount() > 0) {
            ExchangerRequestJTable1.getColumnModel().getColumn(0).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(1).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(2).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(3).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(4).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(5).setResizable(false);
            ExchangerRequestJTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        jButtonBack.setText("<< Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonViewCustodianMessage.setText("View Message");
        jButtonViewCustodianMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewCustodianMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonExchangerConfirm)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldMessageFromCustodian, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonViewCustodianMessage)
                                .addGap(123, 123, 123)
                                .addComponent(jButtonCustodianConfirm))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonBack)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldMessageFromCustodian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCustodianConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonViewCustodianMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExchangerConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCustodianConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCustodianConfirmActionPerformed
        // TODO add your handling code here:
        int row = CustodianRequestJTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String requestDate = (String) CustodianRequestJTable.getValueAt(row, 0);
        for(InvestorWorkRequest request : business.getCustodianWorkQueue().getWorkRequestList()){
            if(request.getSender().getName().equals(customer.getName()) && request.getRequestDate().equals(requestDate)){
                if(request.getStatus().equals("Confirmed by Custodian.")){
                    JOptionPane.showMessageDialog(null, "Request Confirmed by Custodian, you don't have to confirm.", "Warning", JOptionPane.WARNING_MESSAGE);
                
                    return;
                }else if(request.getStatus().equals("Processing")){
                    JOptionPane.showMessageDialog(null, "Request haven't view by Custodian, you can not confirm.", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }else{
                    JOptionPane.showMessageDialog(null, "Request denied by Custodian, please check your balance.", "Warning", JOptionPane.WARNING_MESSAGE);
                    business.getCustodianWorkQueue().getWorkRequestList().remove(request);
                    return;
                }
            }
        }
        poplateCustodianTable();
        
    }//GEN-LAST:event_jButtonCustodianConfirmActionPerformed

    private void jButtonExchangerConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExchangerConfirmActionPerformed
        // TODO add your handling code here:
        int row = ExchangerRequestJTable1.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String seller = (String) ExchangerRequestJTable1.getValueAt(row, 1);
        String buyer = (String) ExchangerRequestJTable1.getValueAt(row, 2);
        int id = (int) ExchangerRequestJTable1.getValueAt(row, 0);
        for(MatchPair mp : business.getMatchPairDirectory().getMatchPairDirectory()){
            if(mp.getId() == id){
                if(seller.equals(customer.getName())){
                    mp.setStatus("Confirmed.");
                }else{
                    mp.setBuyerStatus("Confirmed.");
                }
            }
        }
        poplateExchangerTable();
        
    }//GEN-LAST:event_jButtonExchangerConfirmActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        BitcoinInvestorWorkArea manageOrganizationJPanel = new BitcoinInvestorWorkArea(userProcessContainer, business, customer);
        userProcessContainer.add("BitcoinInvestorWorkArea", manageOrganizationJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonViewCustodianMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewCustodianMessageActionPerformed
        // TODO add your handling code here:
        int row = CustodianRequestJTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String requestDate = (String) CustodianRequestJTable.getValueAt(row, 0);
        for(InvestorWorkRequest request : business.getCustodianWorkQueue().getWorkRequestList()){
            if(request.getSender().getName().equals(customer.getName()) && request.getRequestDate().equals(requestDate)){
                jTextFieldMessageFromCustodian.setText(request.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonViewCustodianMessageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CustodianRequestJTable;
    private javax.swing.JTable ExchangerRequestJTable1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCustodianConfirm;
    private javax.swing.JButton jButtonExchangerConfirm;
    private javax.swing.JButton jButtonViewCustodianMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextFieldMessageFromCustodian;
    // End of variables declaration//GEN-END:variables

    
}
